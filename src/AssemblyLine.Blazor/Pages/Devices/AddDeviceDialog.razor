@inherits ContextComponentBase<ViewModels.Devices.AddDeviceDialogViewModel>;

<MudDialog Class="dialog-responsive">
    <DialogContent>
        <EditForm Model="Model.Device" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <MudTextField Label="Name" Variant="Variant.Text" @bind-Value="Model.Device.Name" For="@(() => @Model.Device.Name)" />
            <MudSelect Label="Device" Variant="Variant.Text" @bind-Value="Model.Device.Type" For="@(() => @Model.Device.Type)">
                <MudSelectItem T="DeviceType?" Value="DeviceType.BarcodeScanner">@DeviceType.BarcodeScanner</MudSelectItem>
                <MudSelectItem T="DeviceType?" Value="DeviceType.Printer">@DeviceType.Printer</MudSelectItem>
                <MudSelectItem T="DeviceType?" Value="DeviceType.Camera">@DeviceType.Camera</MudSelectItem>
                <MudSelectItem T="DeviceType?" Value="DeviceType.SocketTray">@DeviceType.SocketTray</MudSelectItem>
            </MudSelect>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" FullWidth="true">Submit</MudButton>
            <MudText Color="Color.Error">
                <AdditionalErrors @ref="Model.AdditionalErrors" />
            </MudText>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;

    private async Task Submit()
    {
        var device = await Model.SubmitAsync();
        if (device != null)
            MudDialog.Close(DialogResult.Ok(device));
    }
}